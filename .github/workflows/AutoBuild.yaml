name: Automatic Application Build

# Builds project on every push and PR
on:  [push, pull_request]

env:
  path: fprime/Ref

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build application
    # https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python
    steps:
      # checkout the repository
      - uses: actions/checkout@v2

      - name: prepare python pre-built environnement
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: test python is functionnal
        run: python -c "import sys; print(sys.version)"
      
      - name: Pepare dependencies python, cmake
        run: |
          python -m pip install --upgrade pip
          sudo apt install cmake -y
        
      # Init the virtual environnement (project script)
      - name: Prepare venv
        run: ./scripts/init-venv.sh

      # Build the project (project script)
      - name: Build the project
        run: ./scripts/build.sh ${path}
      
      # Upload vuild artifact for static analysis
      - name: Upload the Build final folder
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: ${{ env.path }}/build-fprime-automatic-native

  static_code_analysis:
    needs: build
    runs-on: ubuntu-latest
    name: Static code Analysis
    steps:

      - name: download buld folder
        uses: actions/download-artifact@v2
        with:
          name: Build

      - name : prepare cppcheck
        run: sudo apt install cppcheck -y

      - name: Compute cppcheck code analysis
        run: cppcheck --xml --force build-fprime-automatic-native 2>./cppcheck.xml

      - name: Transform  XML into HTML
        run: |
          mkdir check-html/
          cppcheck-htmlreport --file=cppcheck.xml --report-dir=./check-html/ --source-dir=.

      - name: upload HTML files 
        uses: actions/upload-artifact@v2
        with:
          name: cppCheck coverage report
          path: ./check-html

  local_unit_test:
    runs-on: ubuntu-latest
    name: Local unit tests
    steps:
      # checkout the repository
      - uses: actions/checkout@v2

      - name: prepare python pre-built environnement
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: test python is functionnal
        run: python -c "import sys; print(sys.version)"
      
      - name: Pepare dependencies python, cmake
        run: |
          python -m pip install --upgrade pip
          sudo apt install cmake -y
        
      # Init the virtual environnement (project script)
      - name: Prepare venv
        run: ./scripts/init-venv.sh

      # Build the unit tests and check them one by one in the app
      - name: Build the project
        run: ./scripts/local-unit-test.sh ${path}

  global_unit_test:
    runs-on: ubuntu-latest
    name: Global unit tests
    steps:
      # checkout the repository
      - uses: actions/checkout@v2

      - name: prepare python pre-built environnement
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: test python is functionnal
        run: python -c "import sys; print(sys.version)"
      
      - name: Pepare dependencies python, cmake
        run: |
          python -m pip install --upgrade pip
          sudo apt install cmake -y
        
      # Init the virtual environnement (project script)
      - name: Prepare venv
        run: ./scripts/init-venv.sh

      # Build the unit tests and check them one by one in the app
      - name: Build the project
        run: ./scripts/global-unit-test.sh ${path}